import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import './Problems.css';

const initialTexts = {
  intro: "‘π’•÷á STEM ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂’® ’¥’•’Æ ’∞’∂’°÷Ä’°’æ’∏÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’ß ’Ω’ø’•’≤’Æ’∏÷Ç’¥, ’°’µ’Ω÷Ö÷Ä ’°’º’Ø’° ’•’∂ ’¥’´ ’∑’°÷Ä÷Ñ ’¨’∏÷Ç÷Ä’ª ’¥’°÷Ä’ø’°’∞÷Ä’°’æ’•÷Ä’∂’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’Ø÷Ä’≥’°’ø’∏÷Ç’¥ ’•’∂ ’∂÷Ä’° ’∞’°’Ω’°’∂’•’¨’´’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’∏÷Ç ’°÷Ä’§’µ’∏÷Ç’∂’°’æ’•’ø’∏÷Ç’©’µ’∏÷Ç’∂’®:",
  problem1: "’á’°’ø ’§’∫÷Ä’∏÷Å’∂’•÷Ä’∏÷Ç’¥ ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’•’∂ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’∏÷Ä’°’Ø’°’æ’∏÷Ä’∏÷Ç’¥ ’∏÷Ç’∂’•÷Å’∏’≤ ’¥’°’Ω’∂’°’£’•’ø’∂’•÷Ä, ’∏’æ÷Ñ’•÷Ä ’Ø’°÷Ä’∏’≤ ’•’∂ ’™’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’¥’•’©’∏’§’∂’•÷Ä’∏’æ ’§’°’Ω’°’æ’°’∂’§’•’¨ ’¢’∂’°’£’´’ø’°’Ø’°’∂ ÷á ’ø’•’≠’∂’∏’¨’∏’£’´’°’Ø’°’∂ ’°’º’°÷Ä’Ø’°’∂’•÷Ä÷â ‘±’µ’Ω ’∞’°÷Ä÷Å’® ’∞’°’ø’Ø’°’∫’•’Ω ’Ω÷Ä’æ’∏÷Ç’¥ ’ß ’£’µ’∏÷Ç’≤’°’Ø’°’∂ ’∏÷Ç ’∞’•’º’°’æ’∏÷Ä ’∑÷Ä’ª’°’∂’∂’•÷Ä’∏÷Ç’¥÷â",
  problem2: "‘º’°’¢’∏÷Ä’°’ø’∏÷Ä ’Ω’°÷Ä÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä’´, ’∞’°’¥’°’Ø’°÷Ä’£’´’π’∂’•÷Ä’´, ’Æ÷Ä’°’£÷Ä’°’µ’´’∂ ’°’∫’°’∞’∏’æ’¥’°’∂ ÷á ’´’∂’ø’•÷Ä’∂’•’ø’´ ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ω’°’∞’¥’°’∂’°÷É’°’Ø’∏÷Ç’¥ ’ß ’∏÷Ç’Ω’°’∂’∏’≤’∂’•÷Ä’´ ’£’∏÷Ä’Æ’∂’°’Ø’°’∂ ÷É’∏÷Ä’±’® STEM ’°’º’°÷Ä’Ø’°’∂’•÷Ä’∏÷Ç’¥÷â",
  problem3: "’á’°’ø ’Ø÷Ä’©÷Ö’ª’°’≠’∂’•÷Ä’∏÷Ç’¥ ’∑’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’•’∂ ’Ø’´÷Ä’°’º’æ’•’¨ ’°’æ’°’∂’§’°’Ø’°’∂ ’¥’•’©’∏’§’∂’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’π’•’∂ ’≠’©’°’∂’∏÷Ç’¥ ’Ω’ø’•’≤’Æ’°’£’∏÷Ä’Æ’°’Ø’°’∂ ÷á ÷Ñ’∂’∂’°’§’°’ø’°’Ø’°’∂ ’¥’ø’°’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®÷â STEM-’® ’∫’°’∞’°’∂’ª’∏÷Ç’¥ ’ß ÷É’∏÷Ä’±’∂’°’Ø’°’∂, ’≠’∂’§’´÷Ä’°’Ø’•’∂’ø÷Ä’∏’∂ ’∏÷Ç’Ω’∏÷Ç÷Å’¥’°’∂ ’∂’∏÷Ä ’¥’∏’ø’•÷Å’∏÷Ç’¥’∂’•÷Ä÷â",
  problem4: "’à÷Ç’Ω’°’∂’∏’≤’∂’•÷Ä’® ’∞’°’≥’°’≠ ’π’•’∂ ’Ø’°÷Ä’∏’≤’°’∂’∏÷Ç’¥ ’ø’•’Ω’°’Ø’°’∂ ’£’´’ø’•’¨’´÷Ñ’∂’•÷Ä’® ’£’∏÷Ä’Æ’∂’°’Ø’°’∂ ’§’°’∑’ø’∏÷Ç’¥ ’Ø’´÷Ä’°’º’•’¨, ’´’∂’π’® ’∂’æ’°’¶’•÷Å’∂’∏÷Ç’¥ ’ß ’∂÷Ä’°’∂÷Å ’¥’∏’ø’´’æ’°÷Å’´’°’∂÷â ’ä÷Ä’°’Ø’ø’´’Ø ’∂’°’≠’°’£’Æ’•÷Ä’∂ ’∏÷Ç ’∞’°’¥’°’£’∏÷Ä’Æ’°’Ø÷Å’°’µ’´’∂ ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥’® ’Ø’°÷Ä÷á’∏÷Ä ’•’∂ ’°’µ’Ω ’≠’∂’§’´÷Ä’∂ ’°’∫’°’Ø’∏’≤’¥’∂’∏÷Ä’∏’∑’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
  problem5: "STEM ’∏’¨’∏÷Ä’ø’´’∂ ’æ’°’≤ ’ø’°÷Ä’´÷Ñ’´÷Å ’∞’•’ø’°÷Ñ÷Ä÷Ñ÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’π’Ø’°’µ’°÷Å’∂’•’¨’® ’∞’°’∂’£’•÷Å’∂’∏÷Ç’¥ ’ß ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’¥’∏’ø’´’æ’°÷Å’´’°’µ’´ ’°’∂’Ø’¥’°’∂’®÷â ’ä’•’ø÷Ñ ’ß ’Ω’ø’•’≤’Æ’•’¨ ’¥’´’ª’°’æ’°’µ÷Ä, ’∏÷Ä’ø’•’≤ ’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’∏÷Ç ’ø’•’≠’∂’∏’¨’∏’£’´’°’∂ ’Ø’∂’•÷Ä’Ø’°’µ’°÷Å’æ’•’∂ ’∏÷Ä’∫’•’Ω ’°÷Ä’Ø’°’Æ ÷á ’Ω’ø’•’≤’Æ’°’£’∏÷Ä’Æ’∏÷Ç’©’µ’∏÷Ç’∂÷â",
  conclusion: "‘±’µ’Ω ’¢’∏’¨’∏÷Ä ’¥’°÷Ä’ø’°’∞÷Ä’°’æ’•÷Ä’∂’•÷Ä’® ’∞’°’≤’©’°’∞’°÷Ä’æ’∏÷Ç’¥ ’•’∂ ’∞’Ω’ø’°’Ø ÷Ñ’°’≤’°÷Ñ’°’Ø’°’∂’∏÷Ç’©’µ’°’¥’¢, ’∂’•÷Ä’§÷Ä’∏÷Ç’¥’∂’•÷Ä’∏’æ ÷á ’∂’∏÷Ä’°÷Ä’°÷Ä ’∏÷Ç’Ω’∏÷Ç’¥’∂’°’Ø’°’∂ ’¥’•’©’∏’§’∂’•÷Ä’∏’æ÷â STEM-’® ’¥’•÷Ä ’°’∫’°’£’°’∂ ’ß, ’∏÷Ç’Ω’ø’´ ’Ø’°÷Ä÷á’∏÷Ä ’ß, ’∏÷Ä ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’•÷Ä’•’≠’° ’∏÷Ç’∂’•’∂’° ’§÷Ä’° ’¶’°÷Ä’£’°’∂’°’¨’∏÷Ç ’∞’°’æ’°’Ω’°÷Ä ’∞’∂’°÷Ä’°’æ’∏÷Ä’∏÷Ç’©’µ’∏÷Ç’∂÷â"
};

const Problems = () => {
  const { isLoggedIn } = useAuth();
  const [texts, setTexts] = useState(initialTexts);
  const [editKey, setEditKey] = useState(null);
  const [editValue, setEditValue] = useState('');

  const handleEdit = (key) => {
    setEditKey(key);
    setEditValue(texts[key]);
  };

  const handleSave = (key) => {
    setTexts(prev => ({
      ...prev,
      [key]: editValue
    }));
    setEditKey(null);
    setEditValue('');
  };

  return (
    <div className='problems-container'>
      <h1 className="problems-title">STEM ’Ø÷Ä’©’∏÷Ç’©’µ’°’∂ ’∞’´’¥’∂’°’Ø’°’∂ ’¥’°÷Ä’ø’°’∞÷Ä’°’æ’•÷Ä’∂’•÷Ä’®</h1>
      <div className="problems-context">
        <div className="problems-text-block">
          {editKey === 'intro' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('intro')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.intro}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('intro')}>Edit</button>
              )}
            </>
          )}
        </div>

        <h2 className="problems-subtitle">üìå 1. ’à÷Ä’°’Ø’µ’°’¨ ’∏÷Ç’Ω’∏÷Ç÷Å’´’π’∂’•÷Ä’´ ’∫’°’Ø’°’Ω</h2>
        <div className="problems-text-block">
          {editKey === 'problem1' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('problem1')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.problem1}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('problem1')}>Edit</button>
              )}
            </>
          )}
        </div>

        <h2 className="problems-subtitle">üìå 2. ’è’•’≠’∂’´’Ø’°’Ø’°’∂ ’º’•’Ω’∏÷Ç÷Ä’Ω’∂’•÷Ä’´ ’°’∂’¢’°’æ’°÷Ä’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂</h2>
        <div className="problems-text-block">
          {editKey === 'problem2' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('problem2')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.problem2}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('problem2')}>Edit</button>
              )}
            </>
          )}
        </div>

        <h2 className="problems-subtitle">üìå 3. ’Ä’´’∂, ’¥’•’≠’°’∂’´’Ø’°’Ø’°’∂ ’§’°’Ω’°’æ’°’∂’§’¥’°’∂ ’¥’•’©’∏’§’∂’•÷Ä</h2>
        <div className="problems-text-block">
          {editKey === 'problem3' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('problem3')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.problem3}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('problem3')}>Edit</button>
              )}
            </>
          )}
        </div>

        <h2 className="problems-subtitle">üìå 4. ’è’•’∏÷Ä’´’°’µ’´ ÷á ’´÷Ä’°’Ø’°’∂ ’Ø’µ’°’∂÷Ñ’´ ’¥’´’ª÷á ’Ø’°’∫’´ ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’©’µ’∏÷Ç’∂</h2>
        <div className="problems-text-block">
          {editKey === 'problem4' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('problem4')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.problem4}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('problem4')}>Edit</button>
              )}
            </>
          )}
        </div>

        <h2 className="problems-subtitle">üìå 5. ’Ä’•’ø’°÷Ñ÷Ä÷Ñ÷Ä’∏÷Ç’©’µ’°’∂ ’∫’°’Ø’°’Ω ’æ’°’≤ ’ø’°÷Ä’´÷Ñ’´÷Å</h2>
        <div className="problems-text-block">
          {editKey === 'problem5' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('problem5')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.problem5}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('problem5')}>Edit</button>
              )}
            </>
          )}
        </div>

        <div className="problems-text-block">
          {editKey === 'conclusion' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="problems-textarea"
              />
              <button onClick={() => handleSave('conclusion')}>Save</button>
            </>
          ) : (
            <>
              <p className="problems-text">{texts.conclusion}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('conclusion')}>Edit</button>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Problems;