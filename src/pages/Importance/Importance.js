import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import './Importance.css';

const initialTexts = {
  main: "STEM-’® (’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂, ’ø’•’≠’∂’∏’¨’∏’£’´’°’∂’•÷Ä, ’´’∂’™’•’∂’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ÷á ’¥’°’©’•’¥’°’ø’´’Ø’°) ’™’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’°’∑’≠’°÷Ä’∞’´ ’∞’´’¥÷Ñ’∂ ’ß...",
  card1: "STEM ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂’® ’¶’°÷Ä’£’°÷Å’∂’∏÷Ç’¥ ’ß ’æ’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’¥’ø’°’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂ ÷á ’≠’∂’§’´÷Ä’∂’•÷Ä’´ ’¨’∏÷Ç’Æ’¥’°’∂ ’∞’¥’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä÷â",
  card2: "‘±’∑’≠’°÷Ä’∞’´ ’°’∫’°’£’°’∂ ’Ø’°’≠’æ’°’Æ ’ß STEM ’¥’°’Ω’∂’°’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´÷Å. ’§’° ’°’∑’≠’°’ø’°’∑’∏÷Ç’Ø’°’µ’´ ’∞’´’¥’∂’°’Ø’°’∂ ’∫’°’∞’°’∂’ª’∂ ’ß÷â",
  card3: "STEM-’∂ ’°’¶’§’∏÷Ç’¥ ’ß ’ø’∂’ø’•’Ω’∏÷Ç’©’µ’°’∂, ’∂’∏÷Ä’°÷Ä’°÷Ä’∏÷Ç’©’µ’°’∂ ÷á ’£’¨’∏’¢’°’¨ ’≠’∂’§’´÷Ä’∂’•÷Ä’´ ’¨’∏÷Ç’Æ’¥’°’∂ ’æ÷Ä’°÷â",
  quote: "¬´STEM-’® ’∫’°÷Ä’¶’°’∫’•’Ω ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂ ’π’ß÷â ‘±’µ’∂ ’°’∫’°’£’°’µ’´ ’¢’°’∂’°’¨’´’∂ ’ß, ’∏÷Ä’ø’•’≤ ’ø’•’≠’∂’∏’¨’∏’£’´’°’∂’•÷Ä’® ’Æ’°’º’°’µ’∏÷Ç’¥ ’•’∂ ’¥’°÷Ä’§’∏÷Ç’∂¬ª÷â",
  misconception_intro: "STEM ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂’® ’¥’´’°’µ’∂ ’£’´’ø’∏÷Ç’©’µ’°’∂ ÷á ’¥’°’©’•’¥’°’ø’´’Ø’°’µ’´ ’£’´’ø’•’¨’´÷Ñ’∂’•÷Ä’´ ’¶’°÷Ä’£’°÷Å’∏÷Ç’¥ ’π’ß÷â ‘ª÷Ä ’ß’∏÷Ç’©’µ’°’¥’¢ STEM-’® ÷Ö’£’∂’∏÷Ç’¥ ’ß ’•÷Ä’•’≠’°’∂’•÷Ä’´’∂ ’¶’°÷Ä’£’°÷Å’∂’•’¨ ’∂’∏÷Ä ’¥’ø’°’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’ù ’≠’©’°’∂’•’¨’∏’æ ’∞’•’ø’°÷Ñ÷Ä÷Ñ÷Ä’°’Ω’´÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ÷á ’æ’•÷Ä’¨’∏÷Ç’Æ’°’Ø’°’∂ ’∞’¥’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®÷â ‘±’µ’Ω ’∞’¥’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’±÷á’°’æ’∏÷Ä’•’¨’® ’æ’°’≤ ’ø’°÷Ä’´÷Ñ’´÷Å (’¥’°’∂’Ø’∏÷Ç÷Å ’¥’´’∂’π÷á ’•÷Ä÷Ä’∏÷Ä’§ ’§’°’Ω’°÷Ä’°’∂), ’•÷Ä’¢ ’¥’´’ø÷Ñ’® ’°’º’°’æ’•’¨ ’≥’Ø’∏÷Ç’∂ ’ß, ’∞’´’¥÷Ñ ’ß ’§’∂’∏÷Ç’¥ ’°’¥’¢’∏’≤’ª ’Ø’µ’°’∂÷Ñ’´ ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥ ’Ø’´÷Ä’°’º’æ’∏’≤ ’¥’ø’°’Æ’∏’≤’∏÷Ç’©’µ’°’∂ ’±÷á’°’æ’∏÷Ä’¥’°’∂ ’∞’°’¥’°÷Ä÷â ’ç’ø’∏÷Ä÷á ’¢’•÷Ä’æ’°’Æ ’•’∂ STEM-’´ ’¥’°’Ω’´’∂ ’ø’°÷Ä’°’Æ’æ’°’Æ ’¥’´ ÷Ñ’°’∂’´ ’¥’´÷Ü’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’°÷Ä’™’• ’∞’•÷Ä÷Ñ’•’¨’ù ’§÷Ä’° ÷Ö’£’∏÷Ç’ø’∂’•÷Ä’® ’¨’´’°÷Ä’™’•÷Ñ ’∞’°’Ω’Ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â",
  misconception1: "‘ª÷Ä’°’Ø’°’∂’∏÷Ç’¥ STEM-’® ’°’∂’¢’°’™’°’∂’•’¨’´ ’ß ’°’µ’¨ ’∏’¨’∏÷Ä’ø’∂’•÷Ä’´÷Å ÷á ’Ø’°÷Ä’∏’≤ ’ß ’¢’°÷Ä’•’¨’°’æ’•’¨ ’°’µ’¨ ’°’º’°÷Ä’Ø’°’∂’•÷Ä’´ ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥’®÷â ’ï÷Ä’´’∂’°’Ø’ù ’∞’•’ø’°’¶’∏’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ÷Å’∏÷Ç’µ÷Å ’•’∂ ’ø’æ’•’¨, ’∏÷Ä ’£’´’ø’∏÷Ç’©’µ’°’∂ ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥’∂ ÷Ö’£’∂’∏÷Ç’¥ ’ß ’¢’°÷Ä’•’¨’°’æ’•’¨ ’£÷Ä’°’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂’®, ’¨’•’¶’æ’´ ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥’® ÷á ’£’∏÷Ä’Æ’°’§’´÷Ä ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂’•÷Ä’®÷â",
  misconception2: "‘π’•÷á ’ø’•’≠’∂’∏’¨’∏’£’´’°’∂ STEM-’´ ’¥’´ ’¥’°’Ω’∂ ’ß, ’Ω’°’Ø’°’µ’∂ STEM ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂’® ’∞’°’ø’Ø’°’∫’•’Ω ÷É’∏÷Ñ÷Ä ’•÷Ä’•’≠’°’∂’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’°’∂’∞÷Ä’°’™’•’∑’ø ’π’ß ’©’æ’°’µ’´’∂ ’Ω’°÷Ä÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥’∂’•÷Ä’∏’æ÷â ’ï÷Ä’´’∂’°’Ø’ù ’Ø’∏’∂’Ω’ø÷Ä’∏÷Ç’Ø’ø’∏÷Ä’∂’•÷Ä’∏’æ ’≠’°’≤’°’¨’®, ’°’µ’£’•’£’∏÷Ä’Æ’∏÷Ç’©’µ’°’¥’¢ ’¶’¢’°’≤’æ’•’¨’® ’Ø’°’¥ ’£’¨’∏÷Ç’≠’Ø’∏’ø÷Ä’∏÷Ç’Ø’∂’•÷Ä ’¨’∏÷Ç’Æ’•’¨’® ’∂’∏÷Ç’µ’∂’∫’•’Ω STEM-’´ ’¢’°’≤’°’§÷Ä’´’π’∂’•÷Ä ’•’∂÷â STEM ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥’® ’Ø’°÷Ä’∏’≤ ’ß ’´÷Ä’°’Ø’°’∂’°’∂’°’¨ ÷Å’°’∂’Ø’°÷Å’°’Æ ’∫’°’∞’´’ù ’∂’æ’°’¶’°’£’∏÷Ç’µ’∂ ’º’•’Ω’∏÷Ç÷Ä’Ω’∂’•÷Ä’∏’æ÷â",
  misconception3: "‘æ’∂’∏’≤’∂’•÷Ä’®, ’∏’æ÷Ñ’•÷Ä ’£’´’ø’°’Ø÷Å’∏÷Ç’¥ ’•’∂ STEM-’´ ÷Ö’£’∏÷Ç’ø’∂’•÷Ä’®, ’Ø’°÷Ä’∏’≤ ’•’∂ ’ø’°’∂’® ’≠÷Ä’°’≠’∏÷Ç’Ω’•’¨ ’§÷Ä’° ’∞’•’ø ’Ø’°’∫’æ’°’Æ ’£’∏÷Ä’Æ’∏÷Ç’∂’•’∏÷Ç’©’µ’∏÷Ç’∂÷â ’ï÷Ä’´’∂’°’Ø’ù ‘ø÷Ä’©’∏÷Ç’©’µ’°’∂ ’∂’°’≠’°÷Ä’°÷Ä’∏÷Ç’©’µ’°’∂ ’Ø’∏’≤’¥’´÷Å ÷Ü’´’∂’°’∂’Ω’°’æ’∏÷Ä’æ’∏’≤ Ready to Learn Initiative ’Æ÷Ä’°’£÷Ä’´ ’∑÷Ä’ª’°’∂’°’Ø’∏÷Ç’¥ PBS-’® ’¥’∑’°’Ø’•’¨ ’ß ’≠’°’≤’•÷Ä ÷á ’∞’°’æ’•’¨’æ’°’Æ’∂’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ÷Ö’£’∂’∏÷Ç’¥ ’•’∂ ’•÷Ä’•’≠’°’∂’•÷Ä’´’∂ (2-’´÷Å 8 ’ø’°÷Ä’•’Ø’°’∂) ’¶’°÷Ä’£’°÷Å’∂’•’¨ ’£÷Ä’°’£’´’ø’∏÷Ç’©’µ’°’∂ ÷á ’£’´’ø’∏÷Ç’©’µ’°’∂ ’∞’¥’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®÷â",
  misconception4: "STEM ’∂’°’≠’°’±’•’º’∂’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’§’•’º ’¢’°’≠’æ’∏÷Ç’¥ ’•’∂ ’∞’´’∂ ’Ø’°÷Ä’Æ÷Ä’°’ø’´’∫’•÷Ä’´’ù ’Ø’°’∫’æ’°’Æ ’Ω’•’º’´ ’Ø’°’¥ ’º’°’Ω’°’µ’´ ’∞’•’ø÷â ‘≤’°÷Å’´ ’°’µ’§, STEM-’® ’°’æ’•’¨’´ ’∞’°’≥’°’≠ ’Ø’•’∂’ø÷Ä’∏’∂’°÷Å’æ’∏÷Ç’¥ ’ß ’¢’°÷Ä’±÷Ä ’§’°’Ω’°÷Ä’°’∂’∂’•÷Ä’´ ’æ÷Ä’°, ’´’∂’π’® ’¶÷Ä’Ø’∏÷Ç’¥ ’ß ÷É’∏÷Ñ÷Ä ’•÷Ä’•’≠’°’∂’•÷Ä’´’∂ ’°’µ’§ ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂’´÷Å÷â"
};

const Importance = () => {
  const { isLoggedIn } = useAuth();
  const [texts, setTexts] = useState(initialTexts);
  const [editKey, setEditKey] = useState(null);
  const [editValue, setEditValue] = useState('');

  const handleEdit = (key) => {
    setEditKey(key);
    setEditValue(texts[key]);
  };

  const handleSave = (key) => {
    setTexts(prev => ({
      ...prev,
      [key]: editValue
    }));
    setEditKey(null);
    setEditValue('');
  };

  return (
    <section className="section">
      <div className="title">
        <h1>‘ª’∂’π’∏÷Ç’û ’ß STEM ’Ø÷Ä’©’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ø’°÷Ä÷á’∏÷Ä</h1>
        <div className="importance-text-block">
          {editKey === 'main' ? (
            <>
              <textarea
                value={editValue}
                onChange={e => setEditValue(e.target.value)}
                className="importance-textarea"
              />
              <button onClick={() => handleSave('main')}>Save</button>
            </>
          ) : (
            <>
              <p>{texts.main}</p>
              {isLoggedIn && (
                <button onClick={() => handleEdit('main')}>Edit</button>
              )}
            </>
          )}
        </div>
      </div>

      <div className="card-grid-importance">
        <div className="card-importance">
          <img
            src="https://images.unsplash.com/photo-1596496181871-9681eacf9764?q=80&w=1186&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
            alt="Innovation"
          />
          <div className="card-content">
            <h2>’î’∂’∂’°’§’°’ø’°’Ø’°’∂ ’¥’ø’°’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂</h2>
            <div className="importance-text-block">
              {editKey === 'card1' ? (
                <>
                  <textarea
                    value={editValue}
                    onChange={e => setEditValue(e.target.value)}
                    className="importance-textarea"
                  />
                  <button onClick={() => handleSave('card1')}>Save</button>
                </>
              ) : (
                <>
                  <p>{texts.card1}</p>
                  {isLoggedIn && (
                    <button onClick={() => handleEdit('card1')}>Edit</button>
                  )}
                </>
              )}
            </div>
          </div>
        </div>

        <div className="card-importance">
          <img
            src="https://soeonline.american.edu/wp-content/uploads/sites/2/2022/08/blog-stem-important-960x640-1.jpg"
            alt="Future Professions"
          />
          <div className="card-content">
            <h2>‘±’∫’°’£’°’µ’´ ’¥’°’Ω’∂’°’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</h2>
            <div className="importance-text-block">
              {editKey === 'card2' ? (
                <>
                  <textarea
                    value={editValue}
                    onChange={e => setEditValue(e.target.value)}
                    className="importance-textarea"
                  />
                  <button onClick={() => handleSave('card2')}>Save</button>
                </>
              ) : (
                <>
                  <p>{texts.card2}</p>
                  {isLoggedIn && (
                    <button onClick={() => handleEdit('card2')}>Edit</button>
                  )}
                </>
              )}
            </div>
          </div>
        </div>

        <div className="card-importance">
          <img
            src="https://soeonline.american.edu/wp-content/uploads/sites/2/2022/08/blog-stem-960x640-1.jpg"
            alt="STEM Education"
          />
          <div className="card-content">
            <h2>’Ä’°’Ω’°÷Ä’°’Ø’°’Ø’°’∂ ’¶’°÷Ä’£’°÷Å’∏÷Ç’¥</h2>
            <div className="importance-text-block">
              {editKey === 'card3' ? (
                <>
                  <textarea
                    value={editValue}
                    onChange={e => setEditValue(e.target.value)}
                    className="importance-textarea"
                  />
                  <button onClick={() => handleSave('card3')}>Save</button>
                </>
              ) : (
                <>
                  <p>{texts.card3}</p>
                  {isLoggedIn && (
                    <button onClick={() => handleEdit('card3')}>Edit</button>
                  )}
                </>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="importance-text-block">
        {editKey === 'quote' ? (
          <>
            <textarea
              value={editValue}
              onChange={e => setEditValue(e.target.value)}
              className="importance-textarea"
            />
            <button onClick={() => handleSave('quote')}>Save</button>
          </>
        ) : (
          <>
            <blockquote>{texts.quote}</blockquote>
            {isLoggedIn && (
              <button onClick={() => handleEdit('quote')}>Edit</button>
            )}
          </>
        )}
      </div>

      <div className='steam-iimportance'>
        <div>
          <h1>’ç’≠’°’¨ ’∫’°’ø’Ø’•÷Ä’°÷Å’∏÷Ç’¥’∂’•÷Ä STEM ’Ø÷Ä’©’∏÷Ç’©’µ’°’∂ ’æ’•÷Ä’°’¢’•÷Ä’µ’°’¨</h1>
          <div className="importance-text-block">
            {editKey === 'misconception_intro' ? (
              <>
                <textarea
                  value={editValue}
                  onChange={e => setEditValue(e.target.value)}
                  className="importance-textarea"
                />
                <button onClick={() => handleSave('misconception_intro')}>Save</button>
              </>
            ) : (
              <>
                <p>{texts.misconception_intro}</p>
                {isLoggedIn && (
                  <button onClick={() => handleEdit('misconception_intro')}>Edit</button>
                )}
              </>
            )}
          </div>
        </div>
        <div>
          <h2>üìå ’Ñ’´÷Ü. STEM-’® ’¶’°÷Ä’£’°’∂’∏÷Ç’¥ ’ß ’∏’π-STEM ’°’º’°÷Ä’Ø’°’∂’•÷Ä’´ ’∞’°’∑’æ’´’∂</h2>
          <div className="importance-text-block">
            {editKey === 'misconception1' ? (
              <>
                <textarea
                  value={editValue}
                  onChange={e => setEditValue(e.target.value)}
                  className="importance-textarea"
                />
                <button onClick={() => handleSave('misconception1')}>Save</button>
              </>
            ) : (
              <>
                <p>{texts.misconception1}</p>
                {isLoggedIn && (
                  <button onClick={() => handleEdit('misconception1')}>Edit</button>
                )}
              </>
            )}
          </div>
          <h2>üìå ’Ñ’´÷Ü. STEM ’∂’∑’°’∂’°’Ø’∏÷Ç’¥ ’ß ’°’æ’•’¨’∏÷Ä’§ ’©’æ’°’µ’´’∂ ’ø’•’≠’∂’∏’¨’∏’£’´’°’∂’•÷Ä ’§’°’Ω’°÷Ä’°’∂’∏÷Ç’¥</h2>
          <div className="importance-text-block">
            {editKey === 'misconception2' ? (
              <>
                <textarea
                  value={editValue}
                  onChange={e => setEditValue(e.target.value)}
                  className="importance-textarea"
                />
                <button onClick={() => handleSave('misconception2')}>Save</button>
              </>
            ) : (
              <>
                <p>{texts.misconception2}</p>
                {isLoggedIn && (
                  <button onClick={() => handleEdit('misconception2')}>Edit</button>
                )}
              </>
            )}
          </div>
          <h2>üìå ’Ñ’´÷Ü. STEM ’∏÷Ç’Ω’∏÷Ç÷Å’∏÷Ç’¥’® ’¥’´’°’µ’∂ ’§’°’Ω’°÷Ä’°’∂’∏÷Ç’¥ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•’∂’∏÷Ç’¥</h2>
          <div className="importance-text-block">
            {editKey === 'misconception3' ? (
              <>
                <textarea
                  value={editValue}
                  onChange={e => setEditValue(e.target.value)}
                  className="importance-textarea"
                />
                <button onClick={() => handleSave('misconception3')}>Save</button>
              </>
            ) : (
              <>
                <p>{texts.misconception3}</p>
                {isLoggedIn && (
                  <button onClick={() => handleEdit('misconception3')}>Edit</button>
                )}
              </>
            )}
          </div>
          <h2>üìå ’Ñ’´÷Ü. STEM ’Æ÷Ä’°’£÷Ä’•÷Ä’® ’¥’´’°’µ’∂ ’∏÷Ä’∏’∑ ’•÷Ä’•’≠’°’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’•’∂</h2>
          <div className="importance-text-block">
            {editKey === 'misconception4' ? (
              <>
                <textarea
                  value={editValue}
                  onChange={e => setEditValue(e.target.value)}
                  className="importance-textarea"
                />
                <button onClick={() => handleSave('misconception4')}>Save</button>
              </>
            ) : (
              <>
                <p>{texts.misconception4}</p>
                {isLoggedIn && (
                  <button onClick={() => handleEdit('misconception4')}>Edit</button>
                )}
              </>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default Importance;